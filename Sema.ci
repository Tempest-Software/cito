// Sema.ci - semantic analysis of Ci
//
// Copyright (C) 2011-2023  Piotr Fusik
//
// This file is part of CiTo, see https://github.com/pfusik/cito
//
// CiTo is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CiTo is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CiTo.  If not, see http://www.gnu.org/licenses/

public abstract class CiSema : CiVisitor
{
	protected CiProgram! Program;
	protected CiMethodBase CurrentMethod;
	protected CiScope! CurrentScope;
	protected CiType# Poison = new CiType { Name = "poison" };

	protected override CiContainerType GetCurrentContainer() => this.CurrentScope.GetContainer();

	protected CiType# PoisonError!(CiStatement statement, string message)
	{
		ReportError(statement, message);
		return this.Poison;
	}

	protected void ResolveBase!(CiClass! klass)
	{
		if (klass.HasBaseClass()) {
			this.CurrentScope = klass;
			if (this.Program.TryLookup(klass.BaseClassName) is CiClass! baseClass) {
				if (klass.IsPublic && !baseClass.IsPublic)
					ReportError(klass, "Public class cannot derive from an internal class");
				klass.Parent = baseClass;
			}
			else
				ReportError(klass, $"Base class {klass.BaseClassName} not found");
		}
		this.Program.Classes.Add(klass);
	}

	protected void CheckBaseCycle!(CiClass! klass)
	{
		// Floyd's tortoise and hare cycle-finding algorithm
		CiSymbol hare = klass;
		CiSymbol tortoise = klass;
		do {
			hare = hare.Parent;
			if (hare == null)
				return;
			hare = hare.Parent;
			if (hare == null)
				return;
			tortoise = tortoise.Parent;
		} while (tortoise != hare);
		this.CurrentScope = klass;
		ReportError(klass, $"Circular inheritance for class {klass.Name}");
	}

	static void TakePtr(CiExpr expr)
	{
		if (expr.Type is CiArrayStorageType! arrayStg)
			arrayStg.PtrTaken = true;
	}

	protected bool Coerce!(CiExpr expr, CiType type)
	{
		if (expr == this.Poison)
			return false;
		if (!type.IsAssignableFrom(expr.Type)) {
			ReportError(expr, $"Cannot coerce {expr.Type} to {type}");
			return false;
		}
		if (expr is CiPrefixExpr prefix && prefix.Op == CiToken.New && !(type is CiDynamicPtrType)) {
			assert expr.Type is CiDynamicPtrType newType;
			string kind = newType.Class.Id == CiId.ArrayPtrClass ? "array" : "object";
			ReportError(expr, $"Dynamically allocated {kind} must be assigned to a {expr.Type} reference");
			return false;
		}
		TakePtr(expr);
		return true;
	}

	void VisitAggregateInitializer!(CiAggregateInitializer! expr)
	{
		List<CiExpr#>! items = expr.Items;
		for (int i = 0; i < items.Count; i++)
			items[i] = Resolve(items[i]);
	}

	protected CiExpr# ResolveNew!(CiPrefixExpr# expr)
	{
		if (expr.Type != null)
			return expr;
		if (expr.Inner is CiBinaryExpr binaryNew && binaryNew.Op == CiToken.LeftBrace) {
			if (!(ToType(binaryNew.Left, true) is CiClassType klass) || klass is CiReadWriteClassType)
				return PoisonError(expr, "Invalid argument to new");
			assert binaryNew.Right is CiAggregateInitializer# init;
			ResolveObjectLiteral(klass, init);
			expr.Type = new CiDynamicPtrType { Line = expr.Line, Class = klass.Class };
			expr.Inner = init;
			return expr;
		}
		switch (ToType(expr.Inner, true)) {
		case CiArrayStorageType array:
			expr.Type = new CiDynamicPtrType { Line = expr.Line, Class = this.Program.System.ArrayPtrClass, TypeArg0 = array.GetElementType() };
			expr.Inner = array.LengthExpr;
			return expr;
		case CiStorageType klass:
			expr.Type = new CiDynamicPtrType { Line = expr.Line, Class = klass.Class };
			expr.Inner = null;
			return expr;
		default:
			return PoisonError(expr, "Invalid argument to new");
		}
	}

	static CiRangeType# Union(CiRangeType# left, CiRangeType# right)
	{
		if (right == null)
			return left;
		if (right.Min < left.Min) {
			if (right.Max >= left.Max)
				return right;
			return CiRangeType.New(right.Min, left.Max);
		}
		if (right.Max > left.Max)
			return CiRangeType.New(left.Min, right.Max);
		return left;
	}

	CiType# GetIntegerType!(CiExpr left, CiExpr right)
	{
		CiType# type = this.Program.System.PromoteIntegerTypes(left.Type, right.Type);
		Coerce(left, type);
		Coerce(right, type);
		return type;
	}

	CiIntegerType# GetShiftType!(CiExpr left, CiExpr right)
	{
		CiIntegerType# intType = this.Program.System.IntType;
		Coerce(right, intType);
		if (left.Type.Id == CiId.LongType) {
			assert left.Type is CiIntegerType# longType;
			return longType;
		}
		Coerce(left, intType);
		return intType;
	}

	CiType# GetNumericType!(CiExpr left, CiExpr right)
	{
		CiType# type = this.Program.System.PromoteNumericTypes(left.Type, right.Type);
		Coerce(left, type);
		Coerce(right, type);
		return type;
	}

	protected static int SaturatedNeg(int a)
	{
		if (a == int.MinValue)
			return int.MaxValue;
		return -a;
	}

	static int SaturatedAdd(int a, int b)
	{
		int c = a + b;
		if (c >= 0) {
			if (a < 0 && b < 0)
				return int.MinValue;
		}
		else if (a > 0 && b > 0)
			return int.MaxValue;
		return c;
	}

	static int SaturatedSub(int a, int b)
	{
		if (b == int.MinValue)
			return a < 0 ? a ^ b : int.MaxValue;
		return SaturatedAdd(a, -b);
	}

	static int SaturatedMul(int a, int b)
	{
		if (a == 0 || b == 0)
			return 0;
		if (a == int.MinValue)
			return b >> 31 ^ a;
		if (b == int.MinValue)
			return a >> 31 ^ b;
		if (int.MaxValue / Math.Abs(a) < Math.Abs(b))
			return (a ^ b) >> 31 ^ int.MaxValue;
		return a * b;
	}

	static int SaturatedDiv(int a, int b)
	{
		if (a == int.MinValue && b == -1)
			return int.MaxValue;
		return a / b;
	}

	static int SaturatedShiftRight(int a, int b) => a >> (b >= 31 || b < 0 ? 31 : b);

	static CiRangeType# BitwiseUnsignedOp(CiRangeType left, CiToken op, CiRangeType right)
	{
		int leftVariableBits = left.GetVariableBits();
		int rightVariableBits = right.GetVariableBits();
		int min;
		int max;
		switch (op) {
		case CiToken.And:
			min = left.Min & right.Min & ~CiRangeType.GetMask(~left.Min & ~right.Min & (leftVariableBits | rightVariableBits));
			// Calculate upper bound with variable bits set
			max = (left.Max | leftVariableBits) & (right.Max | rightVariableBits);
			// The upper bound will never exceed the input
			if (max > left.Max)
				max = left.Max;
			if (max > right.Max)
				max = right.Max;
			break;
		case CiToken.Or:
			min = (left.Min & ~leftVariableBits) | (right.Min & ~rightVariableBits);
			max = left.Max | right.Max | CiRangeType.GetMask(left.Max & right.Max & CiRangeType.GetMask(leftVariableBits | rightVariableBits));
			// The lower bound will never be less than the input
			if (min < left.Min)
				min = left.Min;
			if (min < right.Min)
				min = right.Min;
			break;
		case CiToken.Xor:
			int variableBits = leftVariableBits | rightVariableBits;
			min = (left.Min ^ right.Min) & ~variableBits;
			max = (left.Max ^ right.Max) | variableBits;
			break;
		default:
			assert false;
		}
		if (min > max)
			return CiRangeType.New(max, min); // FIXME: this is wrong! e.g. min=0 max=0x8000000_00000000 then 5 should be in range
		return CiRangeType.New(min, max);
	}

	bool IsEnumOp!(CiExpr left, CiExpr right)
	{
		if (left.Type is CiEnum) {
			if (left.Type.Id != CiId.BoolType && !(left.Type is CiEnumFlags))
				ReportError(left, $"Define flags enumeration as: enum* {left.Type}");
			Coerce(right, left.Type);
			return true;
		}
		return false;
	}

	CiType# BitwiseOp!(CiExpr left, CiToken op, CiExpr right)
	{
		if (left.Type is CiRangeType# leftRange && right.Type is CiRangeType# rightRange) {
			CiRangeType# range = null;
			CiRangeType# rightNegative;
			CiRangeType# rightPositive;
			if (rightRange.Min >= 0) {
				rightNegative = null;
				rightPositive = rightRange;
			}
			else if (rightRange.Max < 0) {
				rightNegative = rightRange;
				rightPositive = null;
			}
			else {
				rightNegative = CiRangeType.New(rightRange.Min, -1);
				rightPositive = CiRangeType.New(0, rightRange.Max);
			}
			if (leftRange.Min < 0) {
				CiRangeType leftNegative = leftRange.Max < 0 ? leftRange : CiRangeType.New(leftRange.Min, -1);
				if (rightNegative != null)
					range = BitwiseUnsignedOp(leftNegative, op, rightNegative);
				if (rightPositive != null)
					range = Union(BitwiseUnsignedOp(leftNegative, op, rightPositive), range);
			}
			if (leftRange.Max >= 0) {
				CiRangeType leftPositive = leftRange.Min >= 0 ? leftRange : CiRangeType.New(0, leftRange.Max);
				if (rightNegative != null)
					range = Union(BitwiseUnsignedOp(leftPositive, op, rightNegative), range);
				if (rightPositive != null)
					range = Union(BitwiseUnsignedOp(leftPositive, op, rightPositive), range);
			}
			return range;
		}
		if (IsEnumOp(left, right))
			return left.Type;
		return GetIntegerType(left, right);
	}

	static CiRangeType# NewRangeType(int a, int b, int c, int d)
	{
		if (a > b) {
			int t = a;
			a = b;
			b = t;
		}
		if (c > d) {
			int t = c;
			c = d;
			d = t;
		}
		return CiRangeType.New(a <= c ? a : c, b >= d ? b : d);
	}

	CiLiteral# ToLiteralBool(CiExpr expr, bool value)
	{
		CiLiteral# result = value ? new CiLiteralTrue() : new CiLiteralFalse();
		result.Line = expr.Line;
		result.Type = this.Program.System.BoolType;
		return result;
	}

	protected CiLiteralLong# ToLiteralLong(CiExpr expr, long value) => this.Program.System.NewLiteralLong(value, expr.Line);

	protected CiLiteralDouble# ToLiteralDouble(CiExpr expr, double value) => new CiLiteralDouble { Line = expr.Line, Type = this.Program.System.DoubleType, Value = value };

	void ResolveObjectLiteral!(CiClassType klass, CiAggregateInitializer init)
	{
		foreach (CiExpr! item in init.Items) {
			assert item is CiBinaryExpr! field;
			assert field.Op == CiToken.Assign;
			assert field.Left is CiSymbolReference! symbol;
			Lookup(symbol, klass);
			if (symbol.Symbol is CiField) {
				field.Right = Resolve(field.Right);
				Coerce(field.Right, symbol.Type);
			}
			else
				ReportError(field, "Expected a field");
		}
	}

	CiExpr# ResolveEquality(CiBinaryExpr expr, CiExpr# left, CiExpr# right)
	{
		if (left.Type is CiRangeType leftRange && right.Type is CiRangeType rightRange) {
			if (leftRange.Min == leftRange.Max && leftRange.Min == rightRange.Min && leftRange.Min == rightRange.Max)
				return ToLiteralBool(expr, expr.Op == CiToken.Equal);
			if (leftRange.Max < rightRange.Min || leftRange.Min > rightRange.Max)
				return ToLiteralBool(expr, expr.Op == CiToken.NotEqual);
		}
		else if (left.Type == right.Type) {
			switch (left) {
			case CiLiteralLong leftLong when right is CiLiteralLong rightLong:
				return ToLiteralBool(expr, (expr.Op == CiToken.NotEqual) ^ (leftLong.Value == rightLong.Value));
			case CiLiteralDouble leftDouble when right is CiLiteralDouble rightDouble:
				return ToLiteralBool(expr, (expr.Op == CiToken.NotEqual) ^ (leftDouble.Value == rightDouble.Value));
			case CiLiteralString leftString when right is CiLiteralString rightString:
				return ToLiteralBool(expr, (expr.Op == CiToken.NotEqual) ^ (leftString.Value == rightString.Value));
			case CiLiteralNull _:
				return ToLiteralBool(expr, expr.Op == CiToken.Equal);
			case CiLiteralFalse _:
				return ToLiteralBool(expr, (expr.Op == CiToken.NotEqual) ^ (right is CiLiteralFalse));
			case CiLiteralTrue _:
				return ToLiteralBool(expr, (expr.Op == CiToken.NotEqual) ^ (right is CiLiteralTrue));
			default:
				break;
			}
			if (left.IsConstEnum() && right.IsConstEnum())
				return ToLiteralBool(expr, (expr.Op == CiToken.NotEqual) ^ (left.IntValue() == right.IntValue()));
		}
		if (!left.Type.IsAssignableFrom(right.Type) && !right.Type.IsAssignableFrom(left.Type))
			return PoisonError(expr, $"Cannot compare {left.Type} with {right.Type}");
		TakePtr(left);
		TakePtr(right);
		return new CiBinaryExpr { Line = expr.Line, Left = left, Op = expr.Op, Right = right, Type = this.Program.System.BoolType };
	}

	protected void CheckLValue!(CiExpr expr)
	{
		switch (expr) {
		case CiSymbolReference symbol:
			switch (symbol.Symbol) {
			case CiVar! def:
				def.IsAssigned = true;
				switch (symbol.Symbol.Parent) {
				case CiFor! forLoop:
					forLoop.IsRange = false;
					break;
				case CiForeach _:
					ReportError(expr, "Cannot assign a foreach iteration variable");
					break;
				default:
					break;
				}
				for (CiScope! scope = this.CurrentScope; !(scope is CiClass); scope = scope.Parent) {
					if (scope is CiFor! forLoop
					 && forLoop.IsRange
					 && forLoop.Cond is CiBinaryExpr binaryCond
					 && binaryCond.Right.IsReferenceTo(symbol.Symbol))
						forLoop.IsRange = false;
				}
				break;
			case CiField _:
				if (symbol.Left == null) {
					if (!this.CurrentMethod.IsMutator)
						ReportError(expr, "Cannot modify field in a non-mutating method");
				}
				else {
					switch (symbol.Left.Type) {
					case CiStorageType _:
						// TODO
						break;
					case CiReadWriteClassType _:
						break;
					case CiClassType _:
						ReportError(expr, "Cannot modify field through a read-only reference");
						break;
					}
				}
				break;
			default:
				ReportError(expr, "Cannot modify this");
				break;
			}
			break;
		case CiBinaryExpr indexing when indexing.Op == CiToken.LeftBracket:
			switch (indexing.Left.Type) {
			case CiStorageType _:
				// TODO
				break;
			case CiReadWriteClassType _:
				break;
			case CiClassType _:
				ReportError(expr, "Cannot modify array through a read-only reference");
				break;
			}
			break;
		default:
			ReportError(expr, "Cannot modify this");
			break;
		}
	}

	CiInterpolatedString# Concatenate(CiInterpolatedString left, CiInterpolatedString right)
	{
		CiInterpolatedString# result = new CiInterpolatedString { Line = left.Line, Type = this.Program.System.StringStorageType };
		result.Parts.AddRange(left.Parts);
		if (right.Parts.Count == 0)
			result.Suffix = left.Suffix + right.Suffix;
		else {
			result.Parts.AddRange(right.Parts);
			CiInterpolatedPart! middle = result.Parts[left.Parts.Count];
			middle.Prefix = left.Suffix + middle.Prefix;
			result.Suffix = right.Suffix;
		}
		return result;
	}

	CiInterpolatedString# ToInterpolatedString(CiExpr# expr)
	{
		if (expr is CiInterpolatedString# interpolated)
			return interpolated;
		CiInterpolatedString# result = new CiInterpolatedString { Line = expr.Line, Type = this.Program.System.StringStorageType };
		if (expr is CiLiteral literal)
			result.Suffix = literal.GetLiteralString();
		else {
			result.AddPart("", expr);
			result.Suffix = "";
		}
		return result;
	}

	protected CiExpr Lookup(CiSymbolReference! expr, CiScope scope)
	{
		if (expr.Symbol == null) {
			expr.Symbol = scope.TryLookup(expr.Name);
			if (expr.Symbol == null)
				return PoisonError(expr, $"{expr.Name} not found");
			expr.Type = expr.Symbol.Type;
		}
		if (!(scope is CiEnum) && expr.Symbol is CiConst! konst) {
			ResolveConst(konst);
			if (konst.Value is CiLiteral || konst.Value is CiSymbolReference)
				return konst.Value;
		}
		return expr;
	}

	void CheckComparison!(CiExpr left, CiExpr right)
	{
		CiType doubleType = this.Program.System.DoubleType;
		Coerce(left, doubleType);
		Coerce(right, doubleType);
	}

	protected CiType# EvalType(CiClassType generic, CiType# type)
	{
		if (type.Id == CiId.TypeParam0)
			return generic.TypeArg0;
		if (type.Id == CiId.TypeParam0NotFinal)
			return generic.TypeArg0.IsFinal() ? null : generic.TypeArg0;
		if (type is CiClassType collection && collection.Class.TypeParameterCount == 1 && collection.TypeArg0.Id == CiId.TypeParam0) {
			CiClassType# result = type is CiReadWriteClassType ? new CiReadWriteClassType() : new CiClassType();
			result.Class = collection.Class;
			result.TypeArg0 = generic.TypeArg0;
			return result;
		}
		return type;
	}

	protected bool CanCall(CiExpr obj, CiMethod method, List<CiExpr> arguments)
	{
		CiVar param = method.Parameters.FirstParameter();
		foreach (CiExpr arg in arguments) {
			if (param == null)
				return false;
			CiType# type = param.Type;
			if (obj != null && obj.Type is CiClassType generic)
				type = EvalType(generic, type);
			if (!type.IsAssignableFrom(arg.Type))
				return false;
			param = param.NextParameter();
		}
		return param == null || param.Value != null;
	}

	protected void OpenScope!(CiScope! scope)
	{
		scope.Parent = this.CurrentScope;
		this.CurrentScope = scope;
	}

	protected void CloseScope!()
	{
		this.CurrentScope = this.CurrentScope.Parent;
	}

	protected abstract CiExpr# VisitInterpolatedString!(CiInterpolatedString# expr);

	protected abstract CiExpr# VisitSymbolReference!(CiSymbolReference# expr);

	protected abstract CiExpr# VisitPrefixExpr!(CiPrefixExpr# expr);

	void VisitPostfixExpr!(CiPostfixExpr! expr)
	{
		expr.Inner = Resolve(expr.Inner);
		switch (expr.Op) {
		case CiToken.Increment:
		case CiToken.Decrement:
			CheckLValue(expr.Inner);
			Coerce(expr.Inner, this.Program.System.DoubleType);
			expr.Type = expr.Inner.Type;
			break;
		default:
			ReportError(expr, $"Unexpected {CiLexer.TokenToString(expr.Op)}");
			break;
		}
	}

	CiExpr# ResolveIs(CiBinaryExpr# expr, CiExpr# left, CiExpr right)
	{
		if (!(left.Type is CiClassType leftPtr) || left.Type is CiStorageType)
			return PoisonError(expr, "Left hand side of the 'is' operator must be an object reference");
		CiClass klass;
		switch (right) {
		case CiSymbolReference symbol:
			if (symbol.Symbol is CiClass klass2)
				klass = klass2;
			else
				return PoisonError(expr, "Right hand side of the 'is' operator must be a class name");
			break;
		case CiVar def:
			if (!(def.Type is CiClassType rightPtr))
				return PoisonError(expr, "Right hand side of the 'is' operator must be an object reference definition");
			if (rightPtr is CiReadWriteClassType
			 && !(leftPtr is CiDynamicPtrType)
			 && (rightPtr is CiDynamicPtrType || !(leftPtr is CiReadWriteClassType)))
				return PoisonError(expr, $"{leftPtr} cannot be casted to {rightPtr}");
			// TODO: outside assert NotSupported(expr, "'is' operator", "c", "cpp", "js", "py", "swift", "ts", "cl");
			klass = rightPtr.Class;
			break;
		default:
			return PoisonError(expr, "Right hand side of the 'is' operator must be a class name");
		}
		if (klass.IsSameOrBaseOf(leftPtr.Class))
			return PoisonError(expr, $"{leftPtr} is {klass.Name}, the 'is' operator would always return 'true'");
		if (!leftPtr.Class.IsSameOrBaseOf(klass))
			return PoisonError(expr, $"{leftPtr} is not base class of {klass.Name}, the 'is' operator would always return 'false'");
		expr.Left = left;
		expr.Type = this.Program.System.BoolType;
		return expr;
	}

	CiExpr# VisitBinaryExpr!(CiBinaryExpr# expr)
	{
		CiExpr# left = Resolve(expr.Left);
		CiExpr# right = Resolve(expr.Right);
		if (left == this.Poison || right == this.Poison)
			return this.Poison;
		CiType# type;

		switch (expr.Op) {
		case CiToken.LeftBracket:
			if (!(left.Type is CiClassType klass))
				return PoisonError(expr, "Cannot index this object");
			switch (klass.Class.Id) {
			case CiId.StringClass:
				Coerce(right, this.Program.System.IntType);
				if (left is CiLiteralString stringLiteral && right is CiLiteralLong indexLiteral) {
					long i = indexLiteral.Value;
					if (i >= 0 && i <= int.MaxValue) {
						int c = stringLiteral.GetAsciiAt(i);
						if (c >= 0)
							return CiLiteralChar.New(c, expr.Line);
					}
				}
				type = this.Program.System.CharType;
				break;
			case CiId.ArrayPtrClass:
			case CiId.ArrayStorageClass:
			case CiId.ListClass:
				Coerce(right, this.Program.System.IntType);
				type = klass.GetElementType();
				break;
			case CiId.DictionaryClass:
			case CiId.SortedDictionaryClass:
			case CiId.OrderedDictionaryClass:
				Coerce(right, klass.GetKeyType());
				type = klass.GetValueType();
				break;
			default:
				return PoisonError(expr, "Cannot index this object");
			}
			break;

		case CiToken.Plus:
			if (left.Type is CiRangeType leftAdd && right.Type is CiRangeType rightAdd) {
				type = CiRangeType.New(
					SaturatedAdd(leftAdd.Min, rightAdd.Min),
					SaturatedAdd(leftAdd.Max, rightAdd.Max));
			}
			else if (left.Type is CiStringType || right.Type is CiStringType) {
				Coerce(left, this.Program.System.PrintableType);
				Coerce(right, this.Program.System.PrintableType);
				if (left is CiLiteral leftLiteral && right is CiLiteral rightLiteral)
					return this.Program.System.NewLiteralString(leftLiteral.GetLiteralString() + rightLiteral.GetLiteralString(), expr.Line);
				if (left is CiInterpolatedString || right is CiInterpolatedString)
					return Concatenate(ToInterpolatedString(left), ToInterpolatedString(right));
				type = this.Program.System.StringStorageType;
			}
			else
				type = GetNumericType(left, right);
			break;
		case CiToken.Minus:
			if (left.Type is CiRangeType leftSub && right.Type is CiRangeType rightSub) {
				type = CiRangeType.New(
					SaturatedSub(leftSub.Min, rightSub.Max),
					SaturatedSub(leftSub.Max, rightSub.Min));
			}
			else
				type = GetNumericType(left, right);
			break;
		case CiToken.Asterisk:
			if (left.Type is CiRangeType leftMul && right.Type is CiRangeType rightMul) {
				type = NewRangeType(
					SaturatedMul(leftMul.Min, rightMul.Min),
					SaturatedMul(leftMul.Min, rightMul.Max),
					SaturatedMul(leftMul.Max, rightMul.Min),
					SaturatedMul(leftMul.Max, rightMul.Max));
			}
			else
				type = GetNumericType(left, right);
			break;
		case CiToken.Slash:
			if (left.Type is CiRangeType leftDiv && right.Type is CiRangeType rightDiv) {
				int denMin = rightDiv.Min;
				if (denMin == 0)
					denMin = 1;
				int denMax = rightDiv.Max;
				if (denMax == 0)
					denMax = -1;
				type = NewRangeType(
					SaturatedDiv(leftDiv.Min, denMin),
					SaturatedDiv(leftDiv.Min, denMax),
					SaturatedDiv(leftDiv.Max, denMin),
					SaturatedDiv(leftDiv.Max, denMax));
			}
			else
				type = GetNumericType(left, right);
			break;
		case CiToken.Mod:
			if (left.Type is CiRangeType leftMod && right.Type is CiRangeType rightMod) {
				int den = ~Math.Min(rightMod.Min, -rightMod.Max); // max(abs(rightRange))-1
				if (den < 0)
					return PoisonError(expr, "Mod zero");
				type = CiRangeType.New(
					leftMod.Min >= 0 ? 0 : Math.Max(leftMod.Min, -den),
					leftMod.Max < 0 ? 0 : Math.Min(leftMod.Max, den));
			}
			else
				type = GetIntegerType(left, right);
			break;

		case CiToken.And:
		case CiToken.Or:
		case CiToken.Xor:
			type = BitwiseOp(left, expr.Op, right);
			break;

		case CiToken.ShiftLeft:
			if (left.Type is CiRangeType leftShl && right.Type is CiRangeType rightShl && leftShl.Min == leftShl.Max && rightShl.Min == rightShl.Max) {
				// TODO: improve
				int result = leftShl.Min << rightShl.Min;
				type = CiRangeType.New(result, result);
			}
			else
				type = GetShiftType(left, right);
			break;
		case CiToken.ShiftRight:
			if (left.Type is CiRangeType leftShr && right.Type is CiRangeType rightShr) {
				if (rightShr.Min < 0)
					rightShr = CiRangeType.New(0, 32);
				type = CiRangeType.New(
					SaturatedShiftRight(leftShr.Min, leftShr.Min < 0 ? rightShr.Min : rightShr.Max),
					SaturatedShiftRight(leftShr.Max, leftShr.Max < 0 ? rightShr.Max : rightShr.Min));
			}
			else
				type = GetShiftType(left, right);
			break;

		case CiToken.Equal:
		case CiToken.NotEqual:
			return ResolveEquality(expr, left, right);
		case CiToken.Less:
			if (left.Type is CiRangeType leftLess && right.Type is CiRangeType rightLess) {
				if (leftLess.Max < rightLess.Min)
					return ToLiteralBool(expr, true);
				if (leftLess.Min >= rightLess.Max)
					return ToLiteralBool(expr, false);
			}
			else
				CheckComparison(left, right);
			type = this.Program.System.BoolType;
			break;
		case CiToken.LessOrEqual:
			if (left.Type is CiRangeType leftLeq && right.Type is CiRangeType rightLeq) {
				if (leftLeq.Max <= rightLeq.Min)
					return ToLiteralBool(expr, true);
				if (leftLeq.Min > rightLeq.Max)
					return ToLiteralBool(expr, false);
			}
			else
				CheckComparison(left, right);
			type = this.Program.System.BoolType;
			break;
		case CiToken.Greater:
			if (left.Type is CiRangeType leftGreater && right.Type is CiRangeType rightGreater) {
				if (leftGreater.Min > rightGreater.Max)
					return ToLiteralBool(expr, true);
				if (leftGreater.Max <= rightGreater.Min)
					return ToLiteralBool(expr, false);
			}
			else
				CheckComparison(left, right);
			type = this.Program.System.BoolType;
			break;
		case CiToken.GreaterOrEqual:
			if (left.Type is CiRangeType leftGeq && right.Type is CiRangeType rightGeq) {
				if (leftGeq.Min >= rightGeq.Max)
					return ToLiteralBool(expr, true);
				if (leftGeq.Max < rightGeq.Min)
					return ToLiteralBool(expr, false);
			}
			else
				CheckComparison(left, right);
			type = this.Program.System.BoolType;
			break;

		case CiToken.CondAnd:
			Coerce(left, this.Program.System.BoolType);
			Coerce(right, this.Program.System.BoolType);
			if (left is CiLiteralTrue)
				return right;
			if (left is CiLiteralFalse || right is CiLiteralTrue)
				return left;
			type = this.Program.System.BoolType;
			break;
		case CiToken.CondOr:
			Coerce(left, this.Program.System.BoolType);
			Coerce(right, this.Program.System.BoolType);
			if (left is CiLiteralTrue || right is CiLiteralFalse)
				return left;
			if (left is CiLiteralFalse)
				return right;
			type = this.Program.System.BoolType;
			break;

		case CiToken.Assign:
			CheckLValue(left);
			Coerce(right, left.Type);
			expr.Left = left;
			expr.Right = right;
			expr.Type = left.Type;
			return expr;

		case CiToken.AddAssign:
			CheckLValue(left);
			if (left.Type.Id == CiId.StringStorageType)
				Coerce(right, this.Program.System.PrintableType);
			else {
				Coerce(left, this.Program.System.DoubleType);
				Coerce(right, left.Type);
			}
			expr.Left = left;
			expr.Right = right;
			expr.Type = left.Type;
			return expr;

		case CiToken.SubAssign:
		case CiToken.MulAssign:
		case CiToken.DivAssign:
			CheckLValue(left);
			Coerce(left, this.Program.System.DoubleType);
			Coerce(right, left.Type);
			expr.Left = left;
			expr.Right = right;
			expr.Type = left.Type;
			return expr;

		case CiToken.ModAssign:
		case CiToken.ShiftLeftAssign:
		case CiToken.ShiftRightAssign:
			CheckLValue(left);
			Coerce(left, this.Program.System.IntType);
			Coerce(right, this.Program.System.IntType);
			expr.Left = left;
			expr.Right = right;
			expr.Type = left.Type;
			return expr;

		case CiToken.AndAssign:
		case CiToken.OrAssign:
		case CiToken.XorAssign:
			CheckLValue(left);
			if (!IsEnumOp(left, right)) {
				Coerce(left, this.Program.System.IntType);
				Coerce(right, this.Program.System.IntType);
			}
			expr.Left = left;
			expr.Right = right;
			expr.Type = left.Type;
			return expr;

		case CiToken.Is:
			return ResolveIs(expr, left, right);

		case CiToken.Range:
			return PoisonError(expr, "Range within an expression");
		default:
			assert false;
		}
		if (type is CiRangeType range && range.Min == range.Max)
			return ToLiteralLong(expr, range.Min);
		return new CiBinaryExpr { Line = expr.Line, Left = left, Op = expr.Op, Right = right, Type = type };
	}

	CiType# TryGetPtr(CiType# type)
	{
		if (type.Id == CiId.StringStorageType)
			return this.Program.System.StringPtrType;
		if (type is CiStorageType storage)
			return new CiReadWriteClassType { Class = storage.Class.Id == CiId.ArrayStorageClass ? this.Program.System.ArrayPtrClass : storage.Class, TypeArg0 = storage.TypeArg0, TypeArg1 = storage.TypeArg1 };
		return type;
	}

	static CiClass GetLowestCommonAncestor(CiClass left, CiClass right)
	{
		for (;;) {
			if (left.IsSameOrBaseOf(right))
				return left;
			if (left.Parent is CiClass parent)
				left = parent;
			else
				return null;
		}
	}

	CiType# GetCommonType!(CiExpr left, CiExpr right)
	{
		if (left.Type is CiRangeType# leftRange && right.Type is CiRangeType# rightRange)
			return Union(leftRange, rightRange);
		CiType# ptr = TryGetPtr(left.Type);
		if (ptr.IsAssignableFrom(right.Type))
			return ptr;
		ptr = TryGetPtr(right.Type);
		if (ptr.IsAssignableFrom(left.Type))
			return ptr;
		if (left.Type is CiClassType leftClass && right.Type is CiClassType rightClass && leftClass.EqualTypeArguments(rightClass)) {
			CiClass klass = GetLowestCommonAncestor(leftClass.Class, rightClass.Class);
			if (klass != null) {
				CiClassType# result;
				if (!(leftClass is CiReadWriteClassType) || !(rightClass is CiReadWriteClassType))
					result = new CiClassType();
				else if (leftClass is CiDynamicPtrType && rightClass is CiDynamicPtrType)
					result = new CiDynamicPtrType();
				else
					result = new CiReadWriteClassType();
				result.Class = klass;
				result.TypeArg0 = leftClass.TypeArg0;
				result.TypeArg1 = leftClass.TypeArg1;
				return result;
			}
		}
		return PoisonError(left, $"Incompatible types: {left.Type} and {right.Type}");
	}

	CiExpr# VisitSelectExpr!(CiSelectExpr expr)
	{
		CiExpr# cond = ResolveBool(expr.Cond);
		CiExpr# onTrue = Resolve(expr.OnTrue);
		CiExpr# onFalse = Resolve(expr.OnFalse);
		CiType# type = GetCommonType(onTrue, onFalse);
		Coerce(onTrue, type);
		Coerce(onFalse, type);
		if (cond is CiLiteralTrue)
			return onTrue;
		if (cond is CiLiteralFalse)
			return onFalse;
		return new CiSelectExpr { Line = expr.Line, Cond = cond, OnTrue = onTrue, OnFalse = onFalse, Type = type };
	}

	protected abstract CiExpr# VisitCallExpr!(CiCallExpr# expr);

	void VisitVar(CiVar# expr)
	{
		CiType type = ResolveType(expr);
		if (expr.Value != null) {
			if (type is CiStorageType storage && expr.Value is CiAggregateInitializer init)
				ResolveObjectLiteral(storage, init);
			else {
				expr.Value = Resolve(expr.Value);
				if (!expr.IsAssignableStorage()) {
					if (type is CiArrayStorageType array)
						type = array.GetElementType();
					Coerce(expr.Value, type);
				}
			}
		}
		this.CurrentScope.Add(expr);
	}

	protected CiExpr# Resolve!(CiExpr# expr)
	{
		switch (expr) {
		case CiAggregateInitializer! aggregate:
			VisitAggregateInitializer(aggregate);
			return expr;
		case CiLiteral _:
			return expr;
		case CiInterpolatedString# interpolated:
			return VisitInterpolatedString(interpolated);
		case CiSymbolReference# symbol:
			return VisitSymbolReference(symbol);
		case CiPrefixExpr# prefix:
			return VisitPrefixExpr(prefix);
		case CiPostfixExpr! postfix:
			VisitPostfixExpr(postfix);
			return expr;
		case CiBinaryExpr# binary:
			return VisitBinaryExpr(binary);
		case CiSelectExpr select:
			return VisitSelectExpr(select);
		case CiCallExpr# call:
			return VisitCallExpr(call);
		case CiLambdaExpr _:
			ReportError(expr, "Unexpected lambda expression");
			return expr;
		case CiVar# def:
			VisitVar(def);
			return expr;
		default:
			assert false;
		}
	}

	public override void VisitExpr!(CiExpr# statement)
	{
		Resolve(statement);
	}

	protected CiExpr# ResolveBool!(CiExpr# expr)
	{
		expr = Resolve(expr);
		Coerce(expr, this.Program.System.BoolType);
		return expr;
	}

	void FillGenericClass(CiClassType! result, CiSymbol klass, CiAggregateInitializer typeArgExprs)
	{
		if (!(klass is CiClass generic)) {
			ReportError(typeArgExprs, $"{klass.Name} is not a class");
			return;
		}
		List<CiType#>() typeArgs;
		foreach (CiExpr# typeArgExpr in typeArgExprs.Items)
			typeArgs.Add(ToType(typeArgExpr, false));
		if (typeArgs.Count != generic.TypeParameterCount) {
			ReportError(typeArgExprs, $"Expected {generic.TypeParameterCount} type arguments for {generic.Name}, got {typeArgs.Count}");
			return;
		}
		result.Class = generic;
		result.TypeArg0 = typeArgs[0];
		if (typeArgs.Count == 2)
			result.TypeArg1 = typeArgs[1];
	}

	CiType# ToBaseType!(CiExpr expr, CiToken ptrModifier)
	{
		switch (expr) {
		case CiSymbolReference symbol:
			// built-in, MyEnum, MyClass, MyClass!, MyClass#
			if (this.Program.TryLookup(symbol.Name) is CiType# type) {
				if (type is CiClass klass) {
					if (klass.Id == CiId.MatchClass && ptrModifier != CiToken.EndOfFile)
						ReportError(expr, "Read-write references to the built-in class Match are not supported");
					CiClassType# ptr = CreateClassPtr(klass, ptrModifier);
					if (symbol.Left is CiAggregateInitializer typeArgExprs)
						FillGenericClass(ptr, klass, typeArgExprs);
					else
						ptr.Name = klass.Name; // TODO: needed?
					return ptr;
				}
				ExpectNoPtrModifier(expr, ptrModifier);
				return type;
			}
			return PoisonError(expr, $"Type {symbol.Name} not found");

		case CiCallExpr call:
			// string(), MyClass()
			ExpectNoPtrModifier(expr, ptrModifier);
			if (call.Arguments.Count != 0)
				ReportError(call, "Expected empty parentheses for storage type");
			{
				if (call.Method.Left is CiAggregateInitializer typeArgExprs) {
					CiStorageType# storage = new CiStorageType();
					FillGenericClass(storage, this.Program.TryLookup(call.Method.Name), typeArgExprs);
					return storage;
				}
			}
			if (call.Method.Name == "string")
				return this.Program.System.StringStorageType;
			if (this.Program.TryLookup(call.Method.Name) is CiClass klass2)
				return new CiStorageType { Class = klass2 };
			return PoisonError(expr, $"Class {call.Method.Name} not found");

		default:
			return PoisonError(expr, "Invalid type");
		}
	}

	protected CiType# ToType(CiExpr# expr, bool dynamic)
	{
		CiExpr# minExpr = null;
		if (expr is CiBinaryExpr range && range.Op == CiToken.Range) {
			minExpr = range.Left;
			expr = range.Right;
		}

		CiToken ptrModifier;
		CiClassType# outerArray = null; // leftmost in source
		CiClassType! innerArray = null; // rightmost in source
		for (;;) {
			if (expr is CiPostfixExpr postfix && (postfix.Op == CiToken.ExclamationMark || postfix.Op == CiToken.Hash)) {
				expr = postfix.Inner;
				ptrModifier = postfix.Op;
			}
			else
				ptrModifier = CiToken.EndOfFile;
			if (expr is CiBinaryExpr binary && binary.Op == CiToken.LeftBracket) {
				if (binary.Right != null) {
					ExpectNoPtrModifier(expr, ptrModifier);
					CiExpr# lengthExpr = Resolve(binary.Right);
					CiArrayStorageType# arrayStorage = new CiArrayStorageType { Class = this.Program.System.ArrayStorageClass, TypeArg0 = outerArray, LengthExpr = lengthExpr, Length = 0 };
					if (Coerce(lengthExpr, this.Program.System.IntType) && (!dynamic || binary.Left.IsIndexing())) {
						if (lengthExpr is CiLiteralLong literal) {
							long length = literal.Value;
							if (length < 0)
								ReportError(expr, "Expected non-negative integer");
							else if (length > int.MaxValue)
								ReportError(expr, "Integer too big");
							else
								arrayStorage.Length = length;
						}
						else
							ReportError(lengthExpr, "Expected constant value");
					}
					outerArray = arrayStorage;
				}
				else {
					CiType# elementType = outerArray;
					outerArray = CreateClassPtr(this.Program.System.ArrayPtrClass, ptrModifier);
					outerArray.TypeArg0 = elementType;
				}
				if (innerArray == null)
					innerArray = outerArray;
				expr = binary.Left;
			}
			else
				break;
		}

		CiType# baseType;
		if (minExpr != null) {
			ExpectNoPtrModifier(expr, ptrModifier);
			int min = FoldConstInt(minExpr);
			int max = FoldConstInt(expr);
			if (min > max)
				return PoisonError(expr, "Range min greater than max");
			baseType = CiRangeType.New(min, max);
		}
		else
			baseType = ToBaseType(expr, ptrModifier);
		baseType.Line = expr.Line;

		if (outerArray == null)
			return baseType;
		innerArray.TypeArg0 = baseType;
		return outerArray;
	}

	protected CiType# ResolveType(CiNamedValue! def)
	{
		def.Type = ToType(def.TypeExpr, false);
		return def.Type;
	}

	public override void VisitAssert!(CiAssert! statement)
	{
		statement.Cond = ResolveBool(statement.Cond);
		if (statement.Message != null) {
			statement.Message = Resolve(statement.Message);
			if (!(statement.Message.Type is CiStringType))
				ReportError(statement, "The second argument of 'assert' must be a string");
		}
	}

	protected bool ResolveStatements!(List<CiStatement#> statements)
	{
		bool reachable = true;
		foreach (CiStatement# statement in statements) {
			if (statement is CiConst# konst) {
				ResolveConst(konst);
				this.CurrentScope.Add(konst);
				if (konst.Type is CiArrayStorageType) {
					assert this.CurrentScope.GetContainer() is CiClass klass;
					klass.ConstArrays.Add(konst);
				}
			}
			else
				statement.AcceptStatement(this);
			if (!reachable) {
				ReportError(statement, "Unreachable statement");
				return false;
			}
			reachable = statement.CompletesNormally();
		}
		return reachable;
	}

	public override void VisitBlock!(CiBlock! statement)
	{
		OpenScope(statement);
		statement.SetCompletesNormally(ResolveStatements(statement.Statements));
		CloseScope();
	}

	public override void VisitBreak!(CiBreak! statement)
	{
		statement.LoopOrSwitch.SetCompletesNormally(true);
	}

	public override void VisitContinue!(CiContinue! statement)
	{
	}

	void ResolveLoopCond!(CiLoop! statement)
	{
		if (statement.Cond != null) {
			statement.Cond = ResolveBool(statement.Cond);
			statement.SetCompletesNormally(!(statement.Cond is CiLiteralTrue));
		}
		else
			statement.SetCompletesNormally(false);
	}

	public override void VisitDoWhile!(CiDoWhile! statement)
	{
		OpenScope(statement);
		ResolveLoopCond(statement);
		statement.Body.AcceptStatement(this);
		CloseScope();
	}

	public override void VisitFor!(CiFor! statement)
	{
		OpenScope(statement);
		if (statement.Init != null)
			statement.Init.AcceptStatement(this);
		ResolveLoopCond(statement);
		if (statement.Advance != null)
			statement.Advance.AcceptStatement(this);
		if (statement.Init is CiVar iter
			&& iter.Type is CiIntegerType
			&& iter.Value != null
			&& statement.Cond is CiBinaryExpr cond
			&& cond.Left.IsReferenceTo(iter)
			&& (cond.Right is CiLiteral || (cond.Right is CiSymbolReference limitSymbol && limitSymbol.Symbol is CiVar))) {
			long step = 0;
			switch (statement.Advance) {
			case CiUnaryExpr unary when unary.Inner.IsReferenceTo(iter):
				switch (unary.Op) {
				case CiToken.Increment:
					step = 1;
					break;
				case CiToken.Decrement:
					step = -1;
					break;
				default:
					break;
				}
				break;
			case CiBinaryExpr binary when binary.Left.IsReferenceTo(iter) && binary.Right is CiLiteralLong literalStep:
				switch (binary.Op) {
				case CiToken.AddAssign:
					step = literalStep.Value;
					break;
				case CiToken.SubAssign:
					step = -literalStep.Value;
					break;
				default:
					break;
				}
				break;
			default:
				break;
			}
			if ((step > 0 && (cond.Op == CiToken.Less || cond.Op == CiToken.LessOrEqual))
			 || (step < 0 && (cond.Op == CiToken.Greater || cond.Op == CiToken.GreaterOrEqual))) {
				statement.IsRange = true;
				statement.RangeStep = step;
			}
			statement.IsIteratorUsed = false;
		}
		statement.Body.AcceptStatement(this);
		CloseScope();
	}

	public override void VisitForeach!(CiForeach! statement)
	{
		OpenScope(statement);
		CiVar! element = statement.GetVar();
		ResolveType(element);
		Resolve(statement.Collection);
		if (statement.Collection.Type is CiClassType klass) {
			switch (klass.Class.Id) {
			case CiId.StringClass:
				if (statement.Count() != 1 || !element.Type.IsAssignableFrom(this.Program.System.IntType))
					ReportError(statement, "Expected int iterator variable");
				break;
			case CiId.ArrayStorageClass:
			case CiId.ListClass:
			case CiId.HashSetClass:
				if (statement.Count() != 1)
					ReportError(statement, "Expected one iterator variable");
				else if (!element.Type.IsAssignableFrom(klass.GetElementType()))
					ReportError(statement, $"Cannot coerce {klass.GetElementType()} to {element.Type}");
				break;
			case CiId.DictionaryClass:
			case CiId.SortedDictionaryClass:
			case CiId.OrderedDictionaryClass:
				if (statement.Count() != 2)
					ReportError(statement, "Expected (TKey key, TValue value) iterator");
				else {
					CiVar! value = statement.GetValueVar();
					ResolveType(value);
					if (!element.Type.IsAssignableFrom(klass.GetKeyType()))
						ReportError(statement, $"Cannot coerce {klass.GetKeyType()} to {element.Type}");
					else if (!value.Type.IsAssignableFrom(klass.GetValueType()))
						ReportError(statement, $"Cannot coerce {klass.GetValueType()} to {value.Type}");
				}
				break;
			default:
				ReportError(statement, $"'foreach' invalid on {klass.Class.Name}");
				break;
			}
		}
		else
			ReportError(statement, $"'foreach' invalid on {statement.Collection.Type}");
		statement.SetCompletesNormally(true);
		statement.Body.AcceptStatement(this);
		CloseScope();
	}

	public override void VisitIf!(CiIf! statement)
	{
		statement.Cond = ResolveBool(statement.Cond);
		statement.OnTrue.AcceptStatement(this);
		if (statement.OnFalse != null) {
			statement.OnFalse.AcceptStatement(this);
			statement.SetCompletesNormally(statement.OnTrue.CompletesNormally() || statement.OnFalse.CompletesNormally());
		}
		else
			statement.SetCompletesNormally(true);
	}

	public override void VisitLock!(CiLock! statement)
	{
		statement.Lock = Resolve(statement.Lock);
		Coerce(statement.Lock, this.Program.System.LockPtrType);
		statement.Body.AcceptStatement(this);
	}

	public override void VisitNative!(CiNative! statement)
	{
	}

	public override void VisitReturn!(CiReturn! statement)
	{
		if (this.CurrentMethod.Type.Id == CiId.VoidType) {
			if (statement.Value != null)
				ReportError(statement, "Void method cannot return a value");
		}
		else if (statement.Value == null)
			ReportError(statement, "Missing return value");
		else {
			statement.Value = Resolve(statement.Value);
			Coerce(statement.Value, this.CurrentMethod.Type);
			if (statement.Value is CiSymbolReference symbol
			 && symbol.Symbol is CiVar local
			 && (local.Type.IsFinal() || local.Type.Id == CiId.StringStorageType)
			 && this.CurrentMethod.Type.IsNullable())
				ReportError(statement, "Returning dangling reference to local storage");
		}
	}

	public override void VisitSwitch!(CiSwitch! statement)
	{
		OpenScope(statement);
		statement.Value = Resolve(statement.Value);
		switch (statement.Value.Type) {
		case CiIntegerType i when i.Id != CiId.LongType:
		case CiEnum _:
		// case CiStringType _: matched by case CiClassType
			break;
		case CiClassType klass when !(klass is CiStorageType):
			break;
		default:
			ReportError(statement.Value, $"Switch on type {statement.Value.Type} - expected int, enum, string or object reference");
			return;
		}
		statement.SetCompletesNormally(false);
		foreach (CiCase kase in statement.Cases) {
			for (int i = 0; i < kase.Values.Count; i++) {
				if (statement.Value.Type is CiClassType switchPtr && switchPtr.Class.Id != CiId.StringClass) {
					CiExpr# value = kase.Values[i];
					if (value is CiBinaryExpr when1 && when1.Op == CiToken.When)
						value = when1.Left;
					if (value is CiLiteralNull) {
					}
					else if (!(value is CiVar# def) || def.Value != null)
						ReportError(kase.Values[i], "Expected 'case Type name'");
					else if (!(ResolveType(def) is CiClassType casePtr) || casePtr is CiStorageType)
						ReportError(def, "'case' with non-reference type");
					else if (casePtr is CiReadWriteClassType
					 && !(switchPtr is CiDynamicPtrType)
					 && (casePtr is CiDynamicPtrType || !(switchPtr is CiReadWriteClassType)))
						ReportError(def, $"{switchPtr} cannot be casted to {casePtr}");
					else if (casePtr.Class.IsSameOrBaseOf(switchPtr.Class))
						ReportError(def, $"{statement.Value} is {switchPtr}, 'case {casePtr}' would always match");
					else if (!switchPtr.Class.IsSameOrBaseOf(casePtr.Class))
						ReportError(def, $"{switchPtr} is not base class of {casePtr.Class.Name}, 'case {casePtr}' would never match");
					else {
						statement.Add(def);
						if (kase.Values[i] is CiBinaryExpr! when2 && when2.Op == CiToken.When)
							when2.Right = ResolveBool(when2.Right);
					}
				}
				else {
					kase.Values[i] = FoldConst(kase.Values[i]);
					Coerce(kase.Values[i], statement.Value.Type);
				}
			}
			if (ResolveStatements(kase.Body))
				ReportError(kase.Body.Last(), "Case must end with break, continue, return or throw");
		}
		if (statement.DefaultBody.Count > 0) {
			bool reachable = ResolveStatements(statement.DefaultBody);
			if (reachable)
				ReportError(statement.DefaultBody.Last(), "Default must end with break, continue, return or throw");
		}
		CloseScope();
	}

	public override void VisitThrow!(CiThrow! statement)
	{
		if (!this.CurrentMethod.Throws)
			ReportError(statement, "'throw' in a method not marked 'throws'");
		statement.Message = Resolve(statement.Message);
		if (!(statement.Message.Type is CiStringType))
			ReportError(statement, "The argument of 'throw' must be a string");
	}

	public override void VisitWhile!(CiWhile! statement)
	{
		OpenScope(statement);
		ResolveLoopCond(statement);
		statement.Body.AcceptStatement(this);
		CloseScope();
	}

	protected void ExpectNoPtrModifier!(CiExpr expr, CiToken ptrModifier)
	{
		if (ptrModifier != CiToken.EndOfFile)
			ReportError(expr, $"Unexpected {CiLexer.TokenToString(ptrModifier)} on a non-reference type");
	}

	protected CiExpr# FoldConst!(CiExpr# expr)
	{
		expr = Resolve(expr);
		if (expr is CiLiteral || expr.IsConstEnum())
			return expr;
		ReportError(expr, "Expected constant value");
		return expr;
	}

	protected int FoldConstInt!(CiExpr# expr)
	{
		if (FoldConst(expr) is CiLiteralLong literal) {
			long l = literal.Value;
			if (l < int.MinValue || l > int.MaxValue) {
				ReportError(expr, "Only 32-bit ranges supported");
				return 0;
			}
			return l;
		}
		ReportError(expr, "Expected integer");
		return 0;
	}

	protected static CiClassType# CreateClassPtr(CiClass klass, CiToken ptrModifier)
	{
		CiClassType# ptr;
		switch (ptrModifier) {
		case CiToken.EndOfFile:
			ptr = new CiClassType();
			break;
		case CiToken.ExclamationMark:
			ptr = new CiReadWriteClassType();
			break;
		case CiToken.Hash:
			ptr = new CiDynamicPtrType();
			break;
		default:
			assert false;
		}
		ptr.Class = klass;
		return ptr;
	}

	protected void ResolveTypes!(CiClass! klass)
	{
		this.CurrentScope = klass;
		for (CiSymbol! symbol = klass.First; symbol != null; symbol = symbol.Next) {
			switch (symbol) {
			case CiField! field:
				CiType! type = ResolveType(field);
				if (field.Value != null) {
					field.Value = Resolve(field.Value);
					if (!field.IsAssignableStorage())
						Coerce(field.Value, type is CiArrayStorageType array ? array.GetElementType() : type);
				}
				break;
			case CiMethod! method:
				if (method.TypeExpr == this.Program.System.VoidType)
					method.Type = this.Program.System.VoidType;
				else
					ResolveType(method);
				for (CiVar! param = method.Parameters.FirstParameter(); param != null; param = param.NextParameter()) {
					ResolveType(param);
					if (param.Value != null) {
						param.Value = FoldConst(param.Value);
						Coerce(param.Value, param.Type);
					}
				}
				if (method.CallType == CiCallType.Override || method.CallType == CiCallType.Sealed) {
					if (klass.Parent.TryLookup(method.Name) is CiMethod baseMethod) {
						// TODO: check private
						switch (baseMethod.CallType) {
						case CiCallType.Abstract:
						case CiCallType.Virtual:
						case CiCallType.Override:
							break;
						default:
							ReportError(method, "Base method is not abstract or virtual");
							break;
						}
						// TODO: check parameter and return type
						baseMethod.Calls.Add(method);
					}
					else
						ReportError(method, "No method to override");
				}
				break;
			default:
				break;
			}
		}
	}

	protected void ResolveConst!(CiConst! konst)
	{
		switch (konst.VisitStatus) {
		case CiVisitStatus.NotYet:
			break;
		case CiVisitStatus.InProgress:
			konst.Value = PoisonError(konst, $"Circular dependency in value of constant {konst.Name}");
			konst.VisitStatus = CiVisitStatus.Done;
			return;
		case CiVisitStatus.Done:
			return;
		}
		konst.VisitStatus = CiVisitStatus.InProgress;
		if (!(this.CurrentScope is CiEnum))
			ResolveType(konst);
		konst.Value = Resolve(konst.Value);
		if (konst.Value is CiAggregateInitializer! coll) {
			if (konst.Type is CiClassType array) {
				CiType# elementType = array.GetElementType();
				if (array is CiArrayStorageType arrayStg) {
					if (arrayStg.Length != coll.Items.Count)
						ReportError(konst, $"Declared {arrayStg.Length} elements, initialized {coll.Items.Count}");
				}
				else if (array is CiReadWriteClassType)
					ReportError(konst, "Invalid constant type");
				else
					konst.Type = new CiArrayStorageType { Class = this.Program.System.ArrayStorageClass, TypeArg0 = elementType, Length = coll.Items.Count };
				coll.Type = konst.Type;
				foreach (CiExpr item in coll.Items)
					Coerce(item, elementType);
			}
			else
				ReportError(konst, $"Array initializer for scalar constant {konst.Name}");
		}
		else if (this.CurrentScope is CiEnum && konst.Value.Type is CiRangeType && konst.Value is CiLiteral) {
		}
		else if (konst.Value is CiLiteral || konst.Value.IsConstEnum())
			Coerce(konst.Value, konst.Type);
		else if (konst.Value != this.Poison)
			ReportError(konst.Value, $"Value for constant {konst.Name} is not constant");
		konst.InMethod = this.CurrentMethod;
		konst.VisitStatus = CiVisitStatus.Done;
	}

	public override void VisitConst(CiConst statement)
	{
	}

	public override void VisitEnumValue!(CiConst! konst, CiConst previous)
	{
		if (konst.Value != null) {
			ResolveConst(konst);
			assert konst.Parent is CiEnum! enu;
			enu.HasExplicitValue = true;
		}
		else
			konst.Value = new CiImplicitEnumValue { Value = previous == null ? 0 : previous.Value.IntValue() + 1 };
	}

	protected void ResolveConsts!(CiContainerType! container)
	{
		this.CurrentScope = container;
		switch (container) {
		case CiClass klass:
			for (CiSymbol! symbol = klass.First; symbol != null; symbol = symbol.Next) {
				if (symbol is CiConst! konst)
					ResolveConst(konst);
			}
			break;
		case CiEnum enu:
			enu.AcceptValues(this);
			break;
		default:
			assert false;
		}
	}

	static void MarkMethodLive(CiMethodBase! method)
	{
		if (method.IsLive)
			return;
		method.IsLive = true;
		foreach (CiMethod! called in method.Calls)
			MarkMethodLive(called);
	}

	protected static void MarkClassLive(CiClass klass)
	{
		if (!klass.IsPublic)
			return;
		for (CiSymbol! symbol = klass.First; symbol != null; symbol = symbol.Next) {
			if (symbol is CiMethod! method
			 && (method.Visibility == CiVisibility.Public || method.Visibility == CiVisibility.Protected))
				MarkMethodLive(method);
		}
		if (klass.Constructor != null)
			MarkMethodLive(klass.Constructor);
	}
}
